Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ДобавитьТест("Тест_ВыбрасываетИсключениеЕслиПереопределяетсяМетодБезРодителя")
		.ДобавитьТест("Тест_ВыбрасываетИсключениеЕслиПереопределяетсяНесуществующийМетодРодителя")
		.ДобавитьТест("Тест_НеВыбрасываетИсключениеЕслиПереопределяетсяМетодРодителя")
		.ДобавитьТест("Тест_НаследуетПоведениеИзДругогоКласса");
	
КонецПроцедуры

Процедура Тест_ВыбрасываетИсключениеЕслиПереопределяетсяМетодБезРодителя() Экспорт

	ЮТест.ОжидаетЧто(ОП_Классы.Класс(Тест_ПустойКласс).Метод._("Записать").Переопределяет).Метод(
		"_", ЮТМетоды.МассивПараметров("Записать")
	).ВыбрасываетИсключение("Нельзя переопределить метод, если не указан родитель");

КонецПроцедуры

Процедура Тест_ВыбрасываетИсключениеЕслиПереопределяетсяНесуществующийМетодРодителя() Экспорт

	Класс = ОП_Классы.Класс(Тест_ПустойКласс);
	Класс.Расширяет._(Тест_Документ);
	ЮТест.ОжидаетЧто(Класс.Метод._("БлаБлаБла").Переопределяет).Метод(
		"_", ЮТМетоды.МассивПараметров("БлаБлаБла")
	).ВыбрасываетИсключение("Метод ""БлаБлаБла"" не обнаружен в родителе");

КонецПроцедуры

Процедура Тест_НеВыбрасываетИсключениеЕслиПереопределяетсяМетодРодителя() Экспорт

	Класс = ОП_Классы.Класс(Тест_ПустойКласс);
	Класс.Расширяет._(Тест_Документ);
	ЮТест.ОжидаетЧто(Класс.Метод._("Записать").Переопределяет).Метод(
		"_", ЮТМетоды.МассивПараметров("Записать")
	).НеВыбрасываетИсключение();

КонецПроцедуры

Процедура Тест_НаследуетПоведениеИзДругогоКласса() Экспорт
	
	Сотрудник = ОП_Классы.Класс(Тест_Сотрудник).Новый._("Иван", "Иванов", "Инженер");
	Накладная = ОП_Классы.Класс(Тест_Накладная).Новый._(Сотрудник);
	ЮТест.ОжидаетЧто(Накладная).Свойство("Записать")
		.Что(Накладная).Свойство("Заполнить");

КонецПроцедуры
